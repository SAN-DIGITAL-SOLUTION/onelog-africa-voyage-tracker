import { useDemandes } from '../../hooks/useDemandes';
import { Loader2, AlertCircle, Check, X } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { format } from 'date-fns';
import { fr } from 'date-fns/locale';
import { supabase } from '@/lib/supabase';
import { toast } from '@/components/ui/use-toast';
import { useState } from 'react';

export default function DemandesExploitantPage() {
  const { demandes, loading, error, setDemandes } = useDemandes('en_attente');
  const [updatingId, setUpdatingId] = useState<string | null>(null);

  const handleUpdateStatus = async (demandeId: string, newStatus: 'validee' | 'rejetee') => {
    setUpdatingId(demandeId);
    const { data, error } = await supabase
      .from('demandes')
      .update({ status: newStatus })
      .eq('id', demandeId)
      .select()
      .single();

    if (error) {
      toast({
        title: 'Erreur',
        description: `Impossible de mettre à jour la demande: ${error.message}`,
        variant: 'destructive',
      });
    } else {
      toast({
        title: 'Succès',
        description: `La demande a été ${newStatus === 'validee' ? 'validée' : 'rejetée'}.`,
      });
      // @ts-ignore
      setDemandes(prev => prev.filter(d => d.id !== demandeId));
    }
    setUpdatingId(null);
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center h-screen">
        <Loader2 className="h-12 w-12 animate-spin text-primary" />
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex flex-col justify-center items-center h-screen bg-red-50">
        <AlertCircle className="h-12 w-12 text-red-500" />
        <h2 className="mt-4 text-xl font-semibold text-red-700">Erreur de chargement</h2>
        <p className="mt-2 text-gray-600">{error}</p>
      </div>
    );
  }

  return (
    <div className="p-6">
      <h1 className="text-3xl font-bold mb-6">Gestion des Demandes</h1>
      {demandes.length === 0 ? (
        <div className="text-center py-12 px-6 bg-gray-50 rounded-lg">
          <h3 className="text-lg font-medium text-gray-700">Aucune demande en attente</h3>
          <p className="mt-2 text-sm text-gray-500">Toutes les demandes ont été traitées.</p>
        </div>
      ) : (
        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
          {demandes.map(demande => (
            <Card key={demande.id} className="flex flex-col">
              <CardHeader>
                <CardTitle className="flex justify-between items-start">
                  <span>Demande #{demande.id.substring(0, 6)}...</span>
                  <Badge variant="secondary">{demande.status}</Badge>
                </CardTitle>
                <CardDescription>
                  Reçue le {format(new Date(demande.createdAt), 'd MMMM yyyy HH:mm', { locale: fr })}
                </CardDescription>
              </CardHeader>
              <CardContent className="flex-grow">
                <p><span className="font-semibold">Client:</span> {demande.clientName}</p>
                <p><span className="font-semibold">Départ:</span> {demande.depart}</p>
                <p><span className="font-semibold">Arrivée:</span> {demande.arrivee}</p>
                <p className="mt-2 text-sm text-gray-600">{demande.details}</p>
              </CardContent>
              <CardFooter className="flex justify-end gap-2">
                <Button 
                  variant="outline"
                  size="sm"
                  onClick={() => handleUpdateStatus(demande.id, 'rejetee')}
                  disabled={updatingId === demande.id}
                >
                  {updatingId === demande.id ? <Loader2 className="h-4 w-4 animate-spin"/> : <X className="h-4 w-4 mr-2" />} 
                  Rejeter
                </Button>
                <Button 
                  variant="primary"
                  size="sm"
                  onClick={() => handleUpdateStatus(demande.id, 'validee')}
                  disabled={updatingId === demande.id}
                >
                  {updatingId === demande.id ? <Loader2 className="h-4 w-4 animate-spin"/> : <Check className="h-4 w-4 mr-2" />}
                  Valider
                </Button>
              </CardFooter>
            </Card>
          ))}
        </div>
      )}
    </div>
  );
}
