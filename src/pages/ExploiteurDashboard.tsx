import { useNavigate } from 'react-router-dom';
import { Truck, Users, FileText, AlertCircle, CheckCircle, Clock, DollarSign, MapPin, Settings, Loader2 } from 'lucide-react';
import RequireAuth from '../components/RequireAuth';
import { useDashboardStats } from '../hooks/useDashboardStats';
import { useRecentActivity, Activity } from '../hooks/useRecentActivity';
import { formatDistanceToNow } from 'date-fns';
import { fr } from 'date-fns/locale';

export default function ExploiteurDashboard() {
  const navigate = useNavigate();
  const { stats, loading: statsLoading, error: statsError } = useDashboardStats();
  const { activities, loading: activityLoading, error: activityError } = useRecentActivity();

  const StatCard = ({ icon: Icon, title, value, subtitle, trend, color = "blue" }) => {
    const colorClasses = {
      blue: "bg-blue-50 border-blue-200 text-blue-700",
      green: "bg-green-50 border-green-200 text-green-700",
      orange: "bg-orange-50 border-orange-200 text-orange-700",
      purple: "bg-purple-50 border-purple-200 text-purple-700",
      red: "bg-red-50 border-red-200 text-red-700"
    };

    return (
      <div className={`p-6 rounded-xl border-2 ${colorClasses[color]} hover:shadow-lg transition-all duration-200 hover:scale-105`}>
        <div className="flex items-center justify-between mb-4">
          <div className={`p-3 rounded-lg bg-white shadow-sm`}>
            <Icon className="h-6 w-6" />
          </div>
          {trend && (
            <span className={`text-sm font-medium ${trend > 0 ? 'text-green-600' : 'text-red-600'}`}>
              {trend > 0 ? '+' : ''}{trend}%
            </span>
          )}
        </div>
        <div>
          <h3 className="text-2xl font-bold mb-1">{value}</h3>
          <p className="text-sm opacity-75">{title}</p>
          {subtitle && <p className="text-xs mt-1 opacity-60">{subtitle}</p>}
        </div>
      </div>
    );
  };

      const activityConfig: Record<Activity['type'], { icon: React.ElementType; color: string; text: string }> = {
    nouvelle_demande: { icon: FileText, color: 'blue', text: 'Nouvelle demande reçue' },
    mission_terminee: { icon: CheckCircle, color: 'green', text: 'Mission terminée' },
    chauffeur_disponible: { icon: Users, color: 'orange', text: 'Chauffeur disponible' },
  };

  const QuickAction = ({ icon: Icon, title, description, onClick, color = "blue" }) => {
    const colorClasses = {
      blue: "hover:bg-blue-50 border-blue-200",
      green: "hover:bg-green-50 border-green-200",
      orange: "hover:bg-orange-50 border-orange-200"
    };

    return (
      <button 
        onClick={onClick}
        className={`p-4 rounded-lg border-2 bg-white ${colorClasses[color]} transition-all duration-200 hover:shadow-md text-left w-full`}
      >
        <div className="flex items-start gap-3">
          <Icon className="h-5 w-5 mt-1 text-gray-600" />
          <div>
            <h4 className="font-semibold text-gray-900">{title}</h4>
            <p className="text-sm text-gray-600 mt-1">{description}</p>
          </div>
        </div>
      </button>
    );
  };

      if (statsLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <Loader2 className="h-12 w-12 animate-spin text-orange-600" />
      </div>
    );
  }

    if (statsError) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-red-50">
        <div className="text-center p-8 bg-white rounded-lg shadow-md">
          <AlertCircle className="h-12 w-12 text-red-500 mx-auto mb-4" />
          <h2 className="text-xl font-semibold text-red-700">Erreur de chargement</h2>
          <p className="text-gray-600 mt-2">Impossible de charger les données du tableau de bord.</p>
                    <p className="text-xs text-gray-500 mt-4">{statsError}</p>
        </div>
      </div>
    );
  }

  return (
    <RequireAuth>
      <div className="min-h-screen bg-gradient-to-br from-gray-50 to-orange-50 p-6">
        <div className="max-w-7xl mx-auto">
          {/* Header */}
          <div className="mb-8">
            <div className="flex items-center gap-3 mb-2">
              <div className="p-2 bg-orange-600 rounded-lg">
                <Truck className="h-6 w-6 text-white" />
              </div>
              <h1 className="text-3xl font-bold text-gray-900">Dashboard Exploiteur</h1>
            </div>
            <p className="text-gray-600">Gérez les demandes de transport et supervisez vos opérations</p>
          </div>

          {/* Stats Grid */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
            <StatCard 
              icon={FileText} 
              title="Demandes totales" 
              value={stats.totalDemandes} 
              subtitle="Ce mois"
              trend={null}
              color="blue"
            />
            <StatCard 
              icon={AlertCircle} 
              title="En attente" 
              value={stats.demandesEnAttente} 
              subtitle="À traiter"
              trend={null}
              color="orange"
            />
            <StatCard 
              icon={Truck} 
              title="Missions actives" 
              value={stats.missionsActives} 
              subtitle="En cours"
              trend={null}
              color="green"
            />
            <StatCard 
              icon={Users} 
              title="Chauffeurs disponibles" 
              value={stats.chauffeursDispo} 
              subtitle="Prêts à partir"
              trend={null}
              color="purple"
            />
            <StatCard 
              icon={DollarSign} 
              title="Chiffre d'affaires" 
              value={`${stats.chiffreAffaires.toLocaleString()} FCFA`} 
              subtitle="Ce mois"
              trend={null}
              color="green"
            />
            <StatCard 
              icon={CheckCircle} 
              title="Demandes traitées" 
              value={stats.demandesTraitees} 
              subtitle="Validées/Affectées"
              trend={null}
              color="blue"
            />
          </div>

          {/* Quick Actions */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <div className="bg-white rounded-xl p-6 shadow-sm border">
              <h2 className="text-xl font-semibold mb-4 flex items-center gap-2">
                <Settings className="h-5 w-5" />
                Actions rapides
              </h2>
              <div className="space-y-3">
                <QuickAction 
                  icon={FileText}
                  title="Gérer les demandes"
                  description="Valider ou rejeter les nouvelles demandes"
                  onClick={() => navigate('/demandes-exploitant')}
                  color="blue"
                />
                <QuickAction 
                  icon={Users}
                  title="Affecter chauffeurs"
                  description="Assigner des chauffeurs aux missions validées"
                  onClick={() => navigate('/affectations')}
                  color="green"
                />
                <QuickAction 
                  icon={MapPin}
                  title="Suivre les livraisons"
                  description="Monitoring en temps réel des missions"
                  onClick={() => navigate('/control-room')}
                  color="orange"
                />
              </div>
            </div>

            {/* Recent Activity */}
            <div className="bg-white rounded-xl p-6 shadow-sm border">
              <h2 className="text-xl font-semibold mb-4 flex items-center gap-2">
                <Clock className="h-5 w-5" />
                Activité récente
              </h2>
                            <div className="space-y-3">
                {activityLoading ? (
                  <div className="flex justify-center items-center h-24">
                    <Loader2 className="h-6 w-6 animate-spin text-gray-400" />
                  </div>
                ) : activityError ? (
                  <div className="text-center text-red-500 text-sm p-4 bg-red-50 rounded-lg">
                    Erreur de chargement de l'activité.
                  </div>
                ) : activities.length === 0 ? (
                  <div className="text-center text-gray-500 text-sm p-4 bg-gray-50 rounded-lg">
                    Aucune activité récente.
                  </div>
                ) : (
                  activities.map((activity) => {
                    const config = activityConfig[activity.type];
                    if (!config) return null;

                    return (
                      <div key={activity.id} className={`flex items-start gap-3 p-3 bg-${config.color}-50 rounded-lg`}>
                        <div className={`w-2 h-2 bg-${config.color}-500 rounded-full mt-2`}></div>
                        <div>
                          <p className="text-sm font-medium text-gray-800">{config.text}</p>
                          <p className="text-xs text-gray-600">
                            {activity.description} - 
                            <span className="italic ml-1">
                              {formatDistanceToNow(new Date(activity.timestamp), { addSuffix: true, locale: fr })}
                            </span>
                          </p>
                        </div>
                      </div>
                    );
                  })
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </RequireAuth>
  );
}
