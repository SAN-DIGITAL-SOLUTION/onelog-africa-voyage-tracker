# Script de configuration des hooks Git pour OneLog Africa
# Ce script configure les hooks Git pour appliquer les standards de qualit√© du code

# V√©rifier que nous sommes √† la racine du d√©p√¥t Git
if (-not (Test-Path -Path ".git")) {
    Write-Error "Ce script doit √™tre ex√©cut√© √† la racine d'un d√©p√¥t Git"
    exit 1
}

# Cr√©er le r√©pertoire des hooks s'il n'existe pas
$hooksDir = ".git/hooks"
if (-not (Test-Path -Path $hooksDir)) {
    New-Item -ItemType Directory -Path $hooksDir | Out-Null
}

# Fonction pour cr√©er un hook
function Set-GitHook {
    param (
        [string]$hookName,
        [string]$scriptContent
    )
    
    $hookPath = "$hooksDir/$hookName"
    
    # Sauvegarder le hook existant s'il existe
    if (Test-Path -Path $hookPath) {
        $backupPath = "$hookPath.backup.$(Get-Date -Format 'yyyyMMddHHmmss')"
        Write-Host "Sauvegarde du hook $hookName existant vers $backupPath" -ForegroundColor Yellow
        Copy-Item -Path $hookPath -Destination $backupPath -Force
    }
    
    # Cr√©er le nouveau hook avec encodage UTF-8 sans BOM
    [System.IO.File]::WriteAllText((Resolve-Path $hookPath), $scriptContent, [System.Text.UTF8Encoding]::new($false))
    
    # Rendre le script ex√©cutable (sous Unix/Linux/Mac)
    if ($IsLinux -or $IsMacOS) {
        chmod +x $hookPath
    }
    
    Write-Host "Hook $hookName configur√© avec succ√®s" -ForegroundColor Green
}

# Hook pre-commit : V√©rification du code avant commit
$preCommitScript = @"
#!/bin/sh

# Ex√©cuter ESLint sur les fichiers modifi√©s
echo "Ex√©cution de ESLint..."
npx eslint --fix --ext .js,.jsx,.ts,.tsx $(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(js|jsx|ts|tsx)$' | tr '\r\n' ' ')

# Si ESLint a √©chou√©, annuler le commit
if [ $? -ne 0 ]; then
    echo "‚ùå ESLint a trouv√© des erreurs. Corrigez-les avant de commiter."
    exit 1
fi

# Ex√©cuter les tests unitaires
echo "Ex√©cution des tests unitaires..."
npm test -- --passWithNoTests

# Si les tests √©chouent, annuler le commit
if [ $? -ne 0 ]; then
    echo "‚ùå Des tests ont √©chou√©. Corrigez-les avant de commiter."
    exit 1
fi

echo "‚úÖ Toutes les v√©rifications ont r√©ussi !"
exit 0
"@

Set-GitHook -hookName "pre-commit" -scriptContent $preCommitScript

# Hook commit-msg : V√©rification du format des messages de commit
$commitMsgScript = @"
#!/bin/sh

# V√©rifier le format du message de commit
commit_msg_file="`$1"
commit_msg=`cat "`$commit_msg_file"`

# Format attendu : type(port√©e): description
if ! echo "`$commit_msg" | grep -qE '^(feat|fix|docs|style|refactor|test|chore|ci|perf|build|revert)(\([a-z]+\))?: .{10,}'; then
    echo "‚ùå Format de message de commit invalide."
    echo "   Utilisez : type(port√©e): description (au moins 10 caract√®res)"
    echo "   Exemples :"
    echo "   - feat(auth): ajouter la connexion avec Google"
    echo "   - fix(api): corriger la validation des emails"
    echo "   - docs: mettre √† jour le README"
    echo "   Types valides : feat, fix, docs, style, refactor, test, chore, ci, perf, build, revert"
    exit 1
fi
"@

Set-GitHook -hookName "commit-msg" -scriptContent $commitMsgScript

# Hook pre-push : Ex√©cuter les tests avant le push
$prePushScript = @"
#!/bin/sh

echo "üöÄ Ex√©cution des tests avant le push..."

# Ex√©cuter les tests E2E
# D√©sactiv√© temporairement car peut √™tre long
# echo "Ex√©cution des tests E2E..."
# npm run test:e2e
# if [ $? -ne 0 ]; then
#     echo "‚ùå Les tests E2E ont √©chou√©. Corrigez les probl√®mes avant de pousser."
#     exit 1
# fi

echo "‚úÖ Tous les tests ont r√©ussi !"
exit 0
"@

Set-GitHook -hookName "pre-push" -scriptContent $prePushScript

Write-Host "‚úÖ Configuration des hooks Git termin√©e avec succ√®s !" -ForegroundColor Green
