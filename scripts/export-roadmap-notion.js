#!/usr/bin/env node
/**
 * Script d'export de la roadmap vers Notion
 * 
 * Fonctionnalit√©s :
 * - Lit le fichier ROADMAP_SUIVI_AUTO.md
 * - Parse le contenu en une structure de donn√©es
 * - Synchronise avec une base de donn√©es Notion
 * - Cr√©e/met √† jour les pages Notion en cons√©quence
 */

const { Client } = require('@notionhq/client');
const fs = require('fs').promises;
const path = require('path');
const config = require('../config');
require('dotenv').config();

// V√©rification des variables d'environnement
if (!process.env.NOTION_API_KEY) {
  console.error('‚ùå Erreur: NOTION_API_KEY non d√©fini dans .env');
  process.exit(1);
}

if (!process.env.NOTION_DATABASE_ID) {
  console.error('‚ùå Erreur: NOTION_DATABASE_ID non d√©fini dans .env');
  process.exit(1);
}

// Initialisation du client Notion
const notion = new Client({
  auth: process.env.NOTION_API_KEY,
});

/**
 * Parse le contenu du fichier de roadmap en une structure de donn√©es
 */
async function parseRoadmapContent() {
  try {
    const filePath = path.join(process.cwd(), config.paths.roadmap);
    const content = await fs.readFile(filePath, 'utf-8');
    
    const lines = content.split('\n');
    const sections = [];
    let currentSection = null;
    
    for (const line of lines) {
      // D√©tection des sections (##)
      const sectionMatch = line.match(/^##\s+(.+)/);
      if (sectionMatch) {
        if (currentSection) sections.push({ ...currentSection });
        currentSection = {
          title: sectionMatch[1].trim(),
          tasks: []
        };
        continue;
      }
      
      // D√©tection des t√¢ches (- [ ] ou - [x])
      const taskMatch = line.match(/^- \[([ x])\](.+?)(?:\(#(\d+)\))?/);
      if (taskMatch && currentSection) {
        const [_, status, title, issueNumber] = taskMatch;
        currentSection.tasks.push({
          title: title.trim(),
          completed: status === 'x',
          issueNumber: issueNumber ? parseInt(issueNumber) : null
        });
      }
    }
    
    // Ajouter la derni√®re section si elle existe
    if (currentSection) {
      sections.push(currentSection);
    }
    
    return sections;
  } catch (error) {
    console.error('‚ùå Erreur lors du parsing de la roadmap:', error);
    process.exit(1);
  }
}

/**
 * R√©cup√®re les pages existantes dans la base de donn√©es Notion
 */
async function getExistingPages() {
  try {
    console.log('üîÑ R√©cup√©ration des pages existantes dans Notion...');
    
    const response = await notion.databases.query({
      database_id: process.env.NOTION_DATABASE_ID,
    });
    
    const pages = {};
    response.results.forEach(page => {
      const title = page.properties?.Name?.title?.[0]?.plain_text;
      if (title) {
        pages[title] = page.id;
      }
    });
    
    console.log(`‚úÖ ${Object.keys(pages).length} pages trouv√©es`);
    return pages;
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des pages Notion:', error);
    process.exit(1);
  }
}

/**
 * Cr√©e ou met √† jour une page dans Notion
 */
async function createOrUpdatePage(section, existingPages) {
  try {
    const { title, tasks } = section;
    const pageId = existingPages[title];
    
    const properties = {
      Name: {
        title: [
          {
            text: {
              content: title,
            },
          },
        ],
      },
      'T√¢ches compl√©t√©es': {
        number: tasks.filter(t => t.completed).length,
      },
      'Total des t√¢ches': {
        number: tasks.length,
      },
      'Pourcentage': {
        number: tasks.length > 0 
          ? Math.round((tasks.filter(t => t.completed).length / tasks.length) * 100) 
          : 0,
      },
    };
    
    const children = [
      {
        object: 'block',
        type: 'heading_2',
        heading_2: {
          rich_text: [
            {
              type: 'text',
              text: {
                content: 'T√¢ches',
              },
            },
          ],
        },
      },
      {
        object: 'block',
        type: 'to_do',
        to_do: {
          rich_text: [
            {
              type: 'text',
              text: {
                content: ' ', // Contenu vide pour les cases √† cocher
              },
            },
          ],
          children: tasks.map(task => ({
            object: 'block',
            type: 'to_do',
            to_do: {
              rich_text: [
                {
                  type: 'text',
                  text: {
                    content: task.title,
                    link: task.issueNumber 
                      ? { url: `https://github.com/${config.github.owner}/${config.github.repo}/issues/${task.issueNumber}` }
                      : null,
                  },
                },
              ],
              checked: task.completed,
            },
          })),
        },
      },
    ];
    
    if (pageId) {
      // Mise √† jour de la page existante
      await notion.pages.update({
        page_id: pageId,
        properties,
      });
      
      // Suppression du contenu existant
      const blocks = await notion.blocks.children.list({
        block_id: pageId,
        page_size: 100,
      });
      
      for (const block of blocks.results) {
        await notion.blocks.delete({
          block_id: block.id,
        });
      }
      
      // Ajout du nouveau contenu
      for (const block of children) {
        await notion.blocks.children.append({
          block_id: pageId,
          children: [block],
        });
      }
      
      console.log(`üîÑ Page mise √† jour: ${title}`);
      return { id: pageId, created: false };
    } else {
      // Cr√©ation d'une nouvelle page
      const parent = process.env.NOTION_PARENT_PAGE_ID
        ? { page_id: process.env.NOTION_PARENT_PAGE_ID }
        : { database_id: process.env.NOTION_DATABASE_ID };
      
      const newPage = await notion.pages.create({
        parent,
        properties,
        children,
      });
      
      console.log(`‚úÖ Nouvelle page cr√©√©e: ${title}`);
      return { id: newPage.id, created: true };
    }
  } catch (error) {
    console.error(`‚ùå Erreur lors de la cr√©ation/mise √† jour de la page ${section.title}:`, error);
    return { id: null, created: false, error };
  }
}

/**
 * Point d'entr√©e principal
 */
async function main() {
  console.log('üöÄ D√©marrage de l\'export vers Notion...');
  
  try {
    // 1. Parser le contenu de la roadmap
    const sections = await parseRoadmapContent();
    console.log(`üìã ${sections.length} sections trouv√©es dans la roadmap`);
    
    // 2. R√©cup√©rer les pages existantes dans Notion
    const existingPages = await getExistingPages();
    
    // 3. Cr√©er ou mettre √† jour chaque section dans Notion
    let created = 0;
    let updated = 0;
    let errors = 0;
    
    for (const section of sections) {
      const result = await createOrUpdatePage(section, existingPages);
      if (result.error) {
        errors++;
      } else if (result.created) {
        created++;
      } else {
        updated++;
      }
    }
    
    // 4. Afficher un r√©sum√©
    console.log('\n‚ú® Export termin√© avec succ√®s !');
    console.log(`‚úÖ ${created} nouvelles pages cr√©√©es`);
    console.log(`üîÑ ${updated} pages mises √† jour`);
    if (errors > 0) {
      console.error(`‚ùå ${errors} erreurs rencontr√©es`);
    }
    
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Erreur critique lors de l\'export vers Notion:', error);
    process.exit(1);
  }
}

// D√©marrer le script
main();
