name: Timeline Dashboard Tests

on:
  push:
    branches: [ main, develop, feat/timeline-dashboard ]
    paths:
      - 'src/components/timeline/**'
      - 'src/services/timeline/**'
      - 'src/hooks/timeline/**'
      - '__tests__/unit/timeline/**'
      - '__tests__/e2e/timeline/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/components/timeline/**'
      - 'src/services/timeline/**'
      - 'src/hooks/timeline/**'
      - '__tests__/unit/timeline/**'
      - '__tests__/e2e/timeline/**'

jobs:
  timeline-unit-tests:
    name: Timeline Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run Timeline Unit Tests
      run: |
        npm run test -- __tests__/unit/timeline/ --reporter=verbose
        
    - name: Generate Test Coverage
      run: |
        npm run test:coverage -- __tests__/unit/timeline/
        
    - name: Upload Coverage Reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: timeline-unit-tests
        name: timeline-coverage
        
  timeline-e2e-tests:
    name: Timeline E2E Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Setup Supabase CLI
      uses: supabase/setup-cli@v1
      
    - name: Start Supabase
      run: supabase start
      
    - name: Run Timeline E2E Tests
      run: |
        npm run test:e2e:ci -- --spec "cypress/e2e/timeline/**/*"
        
    - name: Upload E2E Screenshots
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: timeline-e2e-screenshots
        path: cypress/screenshots/timeline/
        
  timeline-performance-tests:
    name: Timeline Performance Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Run Lighthouse CI
      run: |
        npm install -g @lhci/cli
        lhci autorun --config=.lighthouserc.json
        
    - name: Upload Performance Reports
      uses: actions/upload-artifact@v3
      with:
        name: timeline-performance-reports
        path: .lighthouseci/
        
  timeline-integration:
    name: Timeline Integration Validation
    runs-on: ubuntu-latest
    needs: [timeline-unit-tests, timeline-e2e-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run Integration Tests
      run: |
        npm run test -- __tests__/integration/timeline/ --reporter=verbose
        
    - name: Validate Timeline API
      run: |
        node scripts/validate-timeline-api.js
        
    - name: Check Bundle Size
      run: |
        npm run build
        npx bundlesize
        
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [timeline-integration]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Staging
      run: |
        echo "Deploying Timeline Dashboard to staging..."
        # Commandes de déploiement staging
        
    - name: Run Staging Smoke Tests
      run: |
        npm run test:staging -- --spec "cypress/e2e/timeline/smoke.spec.ts"
        
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [timeline-integration]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Production
      run: |
        echo "Deploying Timeline Dashboard to production..."
        # Commandes de déploiement production
        
    - name: Run Production Health Check
      run: |
        npm run test:production -- --spec "cypress/e2e/timeline/health.spec.ts"
        
    - name: Notify Team
      run: |
        echo "Timeline Dashboard deployed successfully!"
        # Notification équipe (Slack, Teams, etc.)
