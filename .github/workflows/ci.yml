name: CI

on:
  push:
    branches: [ main, develop, 'p*/**', 'feat/**' ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'

jobs:
  quality-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: TypeScript check
        run: npm run type-check

      - name: Lint
        run: npm run lint

  e2e-docker:
    runs-on: ubuntu-latest
    services:
      app:
        image: node:20
        ports: ['5173:5173']
        volumes:
          - ./:/app
        working-directory: /app
        command: |
          npm ci
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache node modules
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            **/node_modules
            server/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

  backend-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install backend deps
        working-directory: server
        run: npm ci

      - name: Run Jest tests
        working-directory: server
        env:
          NODE_ENV: test
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          npm test -- --ci --reporters=default --reporters=jest-junit --coverage

      - name: Upload Jest junit
        uses: actions/upload-artifact@v4
        with:
          name: jest-junit-backend
          path: server/junit.xml

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: server/coverage/

  frontend-tests:
    needs: quality-checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install frontend deps
        run: npm ci

      - name: Run unit tests
        run: npx vitest run --reporter=junit --coverage

      - name: Upload frontend coverage
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: coverage/

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-test-results
          path: junit.xml

  frontend-e2e:
    needs: backend-tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install frontend deps
        run: npm ci

      - name: Install backend deps
        working-directory: server
        run: npm ci

      - name: Build Frontend
        run: npm run build
      # Vérification du healthcheck Frontend
      - name: Start app in background
        run: |
          npm run preview -- --port 5173 &
          sleep 5
      - name: Test healthcheck endpoint
        run: |
          curl -f http://localhost:5173
      # Build Docker (vérification Dockerfile)
      - name: Build Docker image
        run: docker build .
      # Deploy preview (Netlify)
      - name: Deploy preview (Netlify)
        if: github.event_name == 'pull_request'
        uses: nwtgck/actions-netlify@v2.0
        with:
          publish-dir: ./dist
          production-deploy: false
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  supabase-seed-qa:
    name: Seed Supabase QA
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/qa' || github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      - name: Install Supabase CLI
        run: npm install -g supabase
      - name: Seed QA database
        env:
          SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL_QA }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY_QA }}
        run: |
          supabase db remote set $SUPABASE_DB_URL
          supabase db execute ./scripts/seed_qa_supabase.sql

  supabase-audit-rls:
    name: Audit RLS Policies
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/qa' || github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      - name: Install Supabase CLI
        run: npm install -g supabase
      - name: Audit RLS policies
        env:
          SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL_QA }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY_QA }}
        run: |
          supabase db remote set $SUPABASE_DB_URL
          supabase db execute ./scripts/audit_rls_policies.sql > rls_audit_report.txt
      - name: Upload RLS audit report
        uses: actions/upload-artifact@v3
        with:
          name: rls-audit-report
          path: rls_audit_report.txt
