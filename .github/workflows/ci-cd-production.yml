name: 🚀 CI/CD Production Pipeline

on:
  push:
    branches: [ main, develop, feat/*, fix/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '20'
  PHP_VERSION: '8.1'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ===== ANALYSE & QUALITÉ =====
  code-quality:
    name: 🔍 Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 ESLint
        run: npm run lint

      - name: 🎯 TypeScript Check
        run: npm run type-check

      - name: 🔒 Security Audit
        run: npm audit --audit-level moderate

      - name: 📊 SonarCloud Scan
        if: ${{ secrets.SONAR_TOKEN != '' }}
        run: |
          npx sonar-scanner \
            -Dsonar.projectKey=san-digital-solution_onelog-africa-voyage-tracker \
            -Dsonar.organization=san-digital-solution \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  # ===== VÉRIFICATION DE SÉCURITÉ =====
  security-readiness:
    name: 🔒 Public Repository Readiness Check
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Security Check - Fichiers sensibles
        run: |
          echo "=== VÉRIFICATION DE SÉCURITÉ - FICHIERS SENSIBLES ===" > security-report.md
          echo "" >> security-report.md

          # Vérifier les fichiers sensibles qui ne devraient pas être committés
          SENSITIVE_PATTERNS=(".env" ".env.local" ".env.*" "*.key" "*.pem" "*.p12" "*.pfx" "secret*" "password*" "token*" "api_key*")

          echo "🔍 Recherche de fichiers sensibles dans le repository..." >> security-report.md

          SENSITIVE_FOUND=false
          for pattern in "${SENSITIVE_PATTERNS[@]}"; do
            echo "" >> security-report.md
            echo "#### Recherche: $pattern" >> security-report.md

            if git ls-files | grep -E "$pattern$" > /dev/null 2>&1; then
              echo "❌ **FICHIERS SENSIBLES TROUVÉS:**" >> security-report.md
              git ls-files | grep -E "$pattern$" >> security-report.md
              SENSITIVE_FOUND=true
            else
              echo "✅ Aucun fichier sensible trouvé pour le pattern: $pattern" >> security-report.md
            fi
          done

          # Vérifier les dumps de base de données
          echo "" >> security-report.md
          echo "#### Recherche de dumps de base de données" >> security-report.md
          if git ls-files | grep -E "(dump\.sql|backup\.sql|\.backup)" > /dev/null 2>&1; then
            echo "❌ **DUMPS DE BASE DE DONNÉES TROUVÉS:**" >> security-report.md
            git ls-files | grep -E "(dump\.sql|backup\.sql|\.backup)" >> security-report.md
            SENSITIVE_FOUND=true
          else
            echo "✅ Aucun dump de base de données trouvé" >> security-report.md
          fi

          # Vérifier .gitignore
          echo "" >> security-report.md
          echo "#### Vérification du .gitignore" >> security-report.md
          if [ -f ".gitignore" ]; then
            echo "✅ Fichier .gitignore présent" >> security-report.md

            # Vérifier les entrées importantes
            if grep -E "(\.env|node_modules|dist|build)" .gitignore > /dev/null; then
              echo "✅ .gitignore contient les entrées importantes" >> security-report.md
            else
              echo "⚠️ .gitignore pourrait manquer d'entrées importantes" >> security-report.md
            fi
          else
            echo "❌ Fichier .gitignore manquant" >> security-report.md
            SENSITIVE_FOUND=true
          fi

          # Vérifier README.md
          echo "" >> security-report.md
          echo "#### Vérification du README.md" >> security-report.md
          if [ -f "README.md" ]; then
            echo "✅ Fichier README.md présent" >> security-report.md

            # Vérifier les sections importantes
            README_SECTIONS=("installation" "usage" "license" "contact" "contribution" "setup" "configuration")
            FOUND_SECTIONS=()

            for section in "${README_SECTIONS[@]}"; do
              if grep -i -E "(^#|$section|^##.*$section)" README.md > /dev/null; then
                FOUND_SECTIONS+=("$section")
              fi
            done

            if [ ${#FOUND_SECTIONS[@]} -gt 0 ]; then
              echo "✅ Sections trouvées: ${FOUND_SECTIONS[*]}" >> security-report.md
            else
              echo "⚠️ Aucune section standard trouvée dans README.md" >> security-report.md
            fi
          else
            echo "❌ Fichier README.md manquant" >> security-report.md
            SENSITIVE_FOUND=true
          fi

          # Vérifier LICENSE
          echo "" >> security-report.md
          echo "#### Vérification de la LICENSE" >> security-report.md
          if [ -f "LICENSE" ] || [ -f "LICENSE.md" ] || [ -f "LICENSE.txt" ]; then
            echo "✅ Fichier de licence présent" >> security-report.md
          else
            echo "⚠️ Aucun fichier de licence trouvé" >> security-report.md
          fi

          # Résultat final
          echo "" >> security-report.md
          if [ "$SENSITIVE_FOUND" = true ]; then
            echo "❌ **ÉCHEC: FICHIERS SENSIBLES DÉTECTÉS**" >> security-report.md
            echo "Le dépôt ne peut pas être rendu public en toute sécurité." >> security-report.md
            exit 1
          else
            echo "✅ **SUCCÈS: AUCUN FICHIER SENSIBLE DÉTECTÉ**" >> security-report.md
            echo "Le dépôt peut être rendu public en toute sécurité." >> security-report.md
          fi

      - name: 📊 Upload Security Report
        uses: actions/upload-artifact@v3
        with:
          name: security-readiness-report
          path: security-report.md
          retention-days: 30

  # ===== TESTS =====
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    needs: [code-quality, security-readiness]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧪 Run unit tests
        run: npm run test:unit -- --coverage

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          fail_ci_if_error: true

  php-tests:
    name: 🐘 PHP Tests
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐘 Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, mysql
          coverage: xdebug

      - name: 📦 Install Composer dependencies
        run: composer install --prefer-dist --no-progress

      - name: 🧪 Run PHPUnit tests
        run: vendor/bin/phpunit --coverage-clover coverage.xml

      - name: 📊 Upload PHP coverage
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml

  e2e-tests:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, php-tests]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🎭 Install Playwright
        run: npx playwright install --with-deps

      - name: 🚀 Build application
        run: npm run build

      - name: 🎭 Run E2E tests
        run: npm run test:e2e
        env:
          CI: true

      - name: 📸 Upload test artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # ===== BUILD =====
  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: [unit-tests, php-tests]
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: npm run build

      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/
          retention-days: 30

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ===== DÉPLOIEMENT STAGING =====
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, e2e-tests]
    if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    environment:
      name: staging
      url: https://staging.onelog-africa.com
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to Staging
        uses: ./.github/actions/deploy
        with:
          environment: staging
          image-tag: ${{ github.sha }}
          supabase-url: ${{ secrets.STAGING_SUPABASE_URL }}
          supabase-key: ${{ secrets.STAGING_SUPABASE_ANON_KEY }}
          sentry-dsn: ${{ secrets.STAGING_SENTRY_DSN }}

      - name: 🔍 Health Check
        run: |
          curl -f https://staging.onelog-africa.com/health || exit 1

      - name: 🎭 Smoke Tests
        run: npm run test:smoke -- --baseURL=https://staging.onelog-africa.com

  # ===== TESTS DE CHARGE =====
  load-tests:
    name: ⚡ Load Tests
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: ⚡ Run load tests
        run: k6 run tests/load/load-test.js
        env:
          SUPABASE_URL: ${{ secrets.STAGING_SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.STAGING_SUPABASE_ANON_KEY }}
          PHP_URL: https://staging.onelog-africa.com # ou l'URL du backend PHP de staging

      - name: 📊 Upload load test results
        uses: actions/upload-artifact@v3
        with:
          name: load-test-results
          path: tests/load/results/

  # ===== DÉPLOIEMENT PRODUCTION =====
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, load-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://onelog-africa.com
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🛡️ Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📊 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: 🚀 Deploy to Production
        uses: ./.github/actions/deploy
        with:
          environment: production
          image-tag: ${{ github.sha }}
          supabase-url: ${{ secrets.PROD_SUPABASE_URL }}
          supabase-key: ${{ secrets.PROD_SUPABASE_ANON_KEY }}
          sentry-dsn: ${{ secrets.PROD_SENTRY_DSN }}

      - name: 🔍 Production Health Check
        run: |
          curl -f https://onelog-africa.com/health || exit 1

      - name: 📢 Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # ===== ROLLBACK =====
  rollback:
    name: ↩️ Rollback Production
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    needs: deploy-production
    environment:
      name: production
      url: https://onelog-africa.com
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ↩️ Rollback to previous version
        uses: ./.github/actions/rollback
        with:
          environment: production

      - name: 📢 Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: 'warning'
          channel: '#alerts'
          text: '🚨 Production rollback executed due to deployment failure'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
