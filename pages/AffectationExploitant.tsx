import { useEffect, useState } from "react";
import { useDemandes } from "@/hooks/useDemandes";
import AffectationForm from "@/components/AffectationForm";
import { supabase } from "@/integrations/supabase/client";
import { useNavigate } from "react-router-dom";

export default function AffectationExploitant() {
  const [role, setRole] = useState<string | null>(null);
  const navigate = useNavigate();
  const { demandes, loading, error } = useDemandes("validée");
  const [selectedDemande, setSelectedDemande] = useState<any>(null);
  const [refresh, setRefresh] = useState(0);

  useEffect(() => {
    // Vérifier le rôle de l'utilisateur connecté
    const fetchRole = async () => {
      const user = supabase.auth.user();
      if (!user) {
        navigate("/auth");
        return;
      }
      // Supposons que le rôle est stocké dans le profil utilisateur (table 'profiles')
      const { data, error } = await supabase
        .from("profiles")
        .select("role")
        .eq("id", user.id)
        .single();
      if (error || !data || data.role !== "exploitant") {
        navigate("/404");
        return;
      }
      setRole(data.role);
    };
    fetchRole();
  }, [navigate]);

  // Rafraîchir la liste après affectation
  const handleAffectation = () => {
    setSelectedDemande(null);
    setRefresh((r) => r + 1);
  };
  useEffect(() => {}, [refresh]);

  if (!role) return null; // Loader ou rien

  return (
    <div className="min-h-screen bg-gray-50 py-8 px-2">
      <h1 className="text-2xl font-bold text-center mb-6">Affectation des chauffeurs</h1>
      {loading && <p>Chargement...</p>}
      {error && <p className="text-red-500">{error}</p>}
      <div className="max-w-2xl mx-auto">
        {demandes.map((demande) => (
          <div key={demande.id} className="mb-4">
            <div className="bg-white rounded-lg shadow p-4 flex flex-col md:flex-row md:items-center justify-between">
              <div className="flex-1">
                <div className="font-semibold text-lg mb-1">{demande.typeMarchandise}</div>
                <div className="text-sm text-gray-600">Départ : {demande.adresseDepart}</div>
                <div className="text-sm text-gray-600">Arrivée : {demande.adresseArrivee}</div>
                <div className="text-xs text-gray-400 mt-1">Demande #{demande.trackingId?.slice(0, 8)}</div>
              </div>
              <button
                className="bg-blue-600 text-white px-3 py-1 rounded hover:bg-blue-700 disabled:opacity-50 mt-3 md:mt-0 md:ml-6"
                onClick={() => setSelectedDemande(demande)}
              >
                Affecter
              </button>
            </div>
            {selectedDemande?.id === demande.id && (
              <AffectationForm demande={demande} onAffectation={handleAffectation} />
            )}
          </div>
        ))}
        {demandes.length === 0 && !loading && <p className="text-gray-500 text-center">Aucune demande à affecter</p>}
      </div>
    </div>
  );
}
